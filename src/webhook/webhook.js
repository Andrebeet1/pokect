import express from 'express';
import {
  handleUpdate,
  envoyerPredictionAvecBouton,
  analyserEtEnvoyerBougie,
  resetSequence
} from '../controllers/marketController.js';

import bot from '../bot.js';
import { genererNouvellePrediction } from '../utils/prediction.js';
import WebSocket from 'ws';

const router = express.Router();
const anciensMessages = {}; // üîÅ Pour supprimer les anciens messages

// üì© Webhook Telegram
router.post('/', async (req, res) => {
  try {
    await handleUpdate(req.body);
    res.sendStatus(200);
  } catch (e) {
    console.error('Erreur webhook:', e);
    res.sendStatus(500);
  }
});

// üéØ Boutons Telegram
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const action = query.data;

  await bot.answerCallbackQuery(query.id);

  // üîÅ Supprimer ancien message
  try {
    await bot.deleteMessage(chatId, messageId);
  } catch (e) {
    console.warn('‚ö†Ô∏è Erreur suppression message bouton :', e.message);
  }

  // üîÑ Nettoyage des anciens messages pr√©c√©dents
  if (anciensMessages[chatId]) {
    for (const id of anciensMessages[chatId]) {
      try {
        await bot.deleteMessage(chatId, id);
      } catch (e) {
        console.warn(`‚ùå Erreur suppression message #${id} :`, e.message);
      }
    }
    anciensMessages[chatId] = [];
  }

  // üîÅ Nouvelle pr√©diction
  if (action === 'NOUVELLE_PREDICTION' || action === 'regenerer') {
    resetSequence();

    const { texte, mouvement } = genererNouvellePrediction();
    let emoji = '‚ö™Ô∏è STABLE';
    if (/hausse/i.test(mouvement)) emoji = 'üü¢ BUY';
    else if (/baisse/i.test(mouvement)) emoji = 'üî¥ SELL';

    const message = `${emoji} *Signal Pr√©dictif*\n\n${texte}`;

    const sent = await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÅ Nouvelle Pr√©diction', callback_data: 'regenerer' }
          ],
          [
            { text: 'üìâ Voir Bougie', callback_data: 'NOUVELLE_ANALYSE' },
            { text: 'üìä Voir Statistiques', callback_data: 'VOIR_STATS' }
          ],
          [
            { text: '‚öôÔ∏è Param√®tres', callback_data: 'PARAMETRES' },
            { text: '‚ùì Aide', callback_data: 'AIDE' }
          ]
        ]
      }
    });

    anciensMessages[chatId] = [sent.message_id];

    // ‚è±Ô∏è Auto-suppression apr√®s 60 sec
    setTimeout(() => {
      bot.deleteMessage(chatId, sent.message_id).catch(err => {
        console.warn('‚ùå Erreur suppression pr√©diction :', err.message);
      });
    }, 60000);
  }

  // üìâ Nouvelle analyse de bougie simul√©e
  if (action === 'NOUVELLE_ANALYSE') {
    const bougieTest = {
      open: (Math.random() * 100).toFixed(2),
      close: (Math.random() * 100).toFixed(2),
      high: (Math.random() * 100).toFixed(2),
      low: (Math.random() * 100).toFixed(2)
    };
    await analyserEtEnvoyerBougie(chatId, bougieTest);
  }

  // üìä Statistiques
  if (action === 'VOIR_STATS') {
    const msg = await bot.sendMessage(chatId, 'üìä *Aucune statistique disponible pour le moment.*', {
      parse_mode: 'Markdown'
    });
    anciensMessages[chatId].push(msg.message_id);
  }

  // ‚öôÔ∏è Param√®tres
  if (action === 'PARAMETRES') {
    const msg = await bot.sendMessage(chatId, '‚öôÔ∏è *Les param√®tres seront bient√¥t disponibles.*', {
      parse_mode: 'Markdown'
    });
    anciensMessages[chatId].push(msg.message_id);
  }

  // ‚ùì Aide
  if (action === 'AIDE') {
    const msg = await bot.sendMessage(chatId, '‚ùì *Cliquez sur les boutons ci-dessus pour interagir avec le bot.*', {
      parse_mode: 'Markdown'
    });
    anciensMessages[chatId].push(msg.message_id);
  }
});

// üì° WebSocket (bougies en temps r√©el)
const ws = new WebSocket('wss://api-us-north.po.market/socket.io/?EIO=4&transport=websocket');

ws.on('message', async (data) => {
  try {
    const text = data.toString();
    if (!text.trim().startsWith('{')) return;

    const tick = JSON.parse(text);
    const bougie = {
      open: parseFloat(tick.open),
      high: parseFloat(tick.high),
      low: parseFloat(tick.low),
      close: parseFloat(tick.close)
    };

    if ([bougie.open, bougie.high, bougie.low, bougie.close].some(isNaN)) {
      console.warn('‚õî Bougie invalide re√ßue :', bougie);
      return;
    }

    await analyserEtEnvoyerBougie(null, bougie);
  } catch (e) {
    console.error('‚ùå Erreur WebSocket Bougie:', e.message);
  }
});

export default router;
