import axios from 'axios';
import { GROQ_API_KEY } from '../config.js';

/**
 * [Access Node ‚Üí CORE-HACKNET v2.1]
 *
 * User: ghost_13
 * Tunnel: wss://target-node.secure.net/socket
 * Protocol: SHA-256 handshake | Token obfuscation enabled
 *
 * Mission: Intercepter, d√©coder et analyser les paquets entrants/sortants via le WebSocket s√©curis√© ci-dessus.
 * Objectif :
 *   - √âcouter les flux en temps r√©el
 *   - Identifier les patterns r√©currents (ex: codes, valeurs, timestamps)
 *   - G√©n√©rer une pr√©diction ou alerte bas√©e sur l‚Äôintelligence comportementale
 *
 * Contraintes :
 *   - Connexion discr√®te, sans interf√©rer
 *   - Limiter le cache m√©moire pour √©viter la d√©tection
 *   - Utiliser uniquement du JS natif et WebSocket API (aucune lib tierce)
 *
 * Bonus üîê : Si un pattern critique (ex: value > x.00 ou spike dans le flux) est d√©tect√©,
 * activer la routine ghostTrigger() avec r√©ponse styl√©e dans la console.
 *
 * [Inject your code below. Begin with stealth handshake.]
 */

/**
 * Analyse une s√©quence de valeurs issues d'un flux WebSocket s√©curis√©.
 */
export async function analyseMarche(sequence) {
  const prompt = `
[Access Node ‚Üí CORE-HACKNET v2.1]

User: ghost_13  
Tunnel: wss://target-node.secure.net/socket  
Protocol: SHA-256 handshake | Token obfuscation enabled

> Mission: Intercepter, d√©coder et analyser les paquets entrants/sortants via le WebSocket s√©curis√© ci-dessus.  
> Objectif :  
  - √âcouter les flux en temps r√©el  
  - Identifier les patterns r√©currents (ex: codes, valeurs, timestamps)  
  - G√©n√©rer une pr√©diction ou alerte bas√©e sur l‚Äôintelligence comportementale

> Contraintes :  
  - Connexion discr√®te, sans interf√©rer  
  - Limiter le cache m√©moire pour √©viter la d√©tection  
  - Utiliser uniquement du JS natif et WebSocket API (auc value > x.00 ou spike dans le flux) est d√©tect√©, active la routine ghostTrigger() et affiche une alerte styl√©e dans la console.

[Attends uniquement le rapport d‚Äôanalyse sous ce format¬†:]
Pattern d√©tect√© : [d√©crire le motif ou la valeur]
Alerte : [true/false]
Routine¬†: [ghostTrigger activ√© ou non]
`;

  try {
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama3-8b-8192',
        messages: [{ role: 'user', content: prompt.trim() }],
        temperature: 0.2
      },
      {
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('‚ùå Erreur API Groq (analyseMarche):', error.response?.data || error.message);
    return '‚ùå Erreur lors de l‚Äôanalyse du flux WebSocket.';
  }
}

// üïØÔ∏è Optionnel¬†: tu peux aussi modifier analyserBougie avec une ambiance similaire si tu veux
export async function analyserBougie(bougie) {
  try {
    const { open, high, low, close } = bougie;

    if ([open, high, low, close].some(val => typeof val !== 'number' || isNaN(val))) {
      console.error('‚ùå Bougie invalide re√ßue :', bougie);
      return '‚ùå Bougie invalide (valeurs manquantes ou incorrectes).';
    }

    const prompt = `
[Access Node ‚Üí CORE-HACKNET v2.1]

User: ghost_13  
Tunnel: wss://target-node.secure.net/socket  
Protocol: SHA-256 handshake | Token obfuscation enabled

> Mission: Analyse et pattern recognition sur une bougie de flux s√©curis√©.
> Donn√©es :
- Open : ${open.toFixed(2)}
- High : ${high.toFixed(2)}
- Low : ${low.toFixed(2)}
- Close : ${close.toFixed(2)}

> Objectif :  
  - Rep√©rer un pattern (ex: spike, range, signal fort)
  - Activer ghostPattern d√©tect√© : [xxx]
Alerte : [true/false]
Routine¬†: [ghostTrigger activ√© ou non]
`;

    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama3-8b-8192',
        messages: [{ role: 'user', content: prompt.trim() }],
        temperature: 0.2
      },
      {
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('‚ùå Erreur API Groq (analyserBougie):', error.response?.data || error.message);
    return '‚ùå Erreur lors de l‚Äôanalyse de la bougie.';
  }
}