let valeurs = [];

/**
 * üì• Ajoute une valeur num√©rique avec timestamp
 */
export function ajouterValeur(valeur) {
  const num = parseFloat(valeur);

  if (typeof num !== 'number' || isNaN(num)) {
    console.warn('‚õî Valeur ignor√©e (non num√©rique ou invalide) :', valeur);
    return;
  }

  valeurs.push({
    valeur: num,
    timestamp: Date.now()
  });
}

/**
 * üïØÔ∏è Construit une bougie √† partir des valeurs accumul√©es
 * puis r√©initialise la liste.
 */
export function construireBougieEtReinitialiser() {
  if (valeurs.length === 0) return null;

  const liste = valeurs.map(v => v.valeur);
  const open = liste[0];
  const close = liste[liste.length - 1];
  const high = Math.max(...liste);
  const low = Math.min(...liste);

  const bougie = { open, high, low, close };

  // V√©rifie que la bougie est compl√®te
  if (
    [open, high, low, close].some(val => typeof val !== 'number' || isNaN(val))
  ) {
    console.error('‚õî Bougie invalide ou incompl√®te :', bougie);
    valeurs.length = 0; // R√©initialise malgr√© tout
    return null;
  }

  valeurs.length = 0; // R√©initialise proprement
  return bougie;
}
